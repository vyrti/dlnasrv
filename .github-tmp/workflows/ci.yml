name: Cross-Platform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Platform-specific configurations
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        # macOS usually has required dependencies pre-installed
        echo "macOS dependencies check complete"

    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        # Windows dependencies are typically handled by vcpkg or pre-installed
        echo "Windows dependencies check complete"

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build project
      run: cargo build --verbose --target ${{ matrix.target }}

    - name: Run unit tests
      run: cargo test --verbose --target ${{ matrix.target }} --lib

    - name: Run platform-specific tests
      run: cargo test --verbose --target ${{ matrix.target }} --test platform_tests

    - name: Run integration tests
      run: cargo test --verbose --target ${{ matrix.target }} --test integration_tests

    - name: Run database tests
      run: cargo test --verbose --target ${{ matrix.target }} database_tests

    - name: Run file watcher tests
      run: cargo test --verbose --target ${{ matrix.target }} watcher_tests

    - name: Test cross-compilation (Linux only)
      if: matrix.platform == 'linux' && matrix.rust == 'stable'
      run: |
        # Install cross-compilation targets
        rustup target add x86_64-pc-windows-gnu
        rustup target add aarch64-unknown-linux-gnu
        
        # Test cross-compilation (build only, no execution)
        cargo build --target x86_64-pc-windows-gnu --verbose || echo "Windows cross-compilation failed (expected)"
        cargo build --target aarch64-unknown-linux-gnu --verbose || echo "ARM64 cross-compilation failed (may need additional setup)"

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vuio-linux-x86_64
            asset_name: vuio-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vuio-windows-x86_64.exe
            asset_name: vuio-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vuio-macos-x86_64
            asset_name: vuio-macos-x86_64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/vuio artifacts/${{ matrix.artifact_name }}
        chmod +x artifacts/${{ matrix.artifact_name }}

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\vuio.exe artifacts\${{ matrix.artifact_name }}

    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd artifacts
        tar -czf ${{ matrix.asset_name }} ${{ matrix.artifact_name }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd artifacts
        7z a ${{ matrix.asset_name }} ${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run benchmarks
      run: |
        # Create a simple benchmark test
        cargo test --release --test integration_tests test_database_concurrent_access -- --ignored
        cargo test --release --test platform_tests test_network_diagnostics -- --ignored

  docker-test:
    name: Docker Container Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t vuio:test .

    - name: Test Docker container
      run: |
        # Run container in background
        docker run -d --name vuio-test -p 8080:8080 vuio:test
        
        # Wait for container to start
        sleep 10
        
        # Test if container is running
        docker ps | grep vuio-test
        
        # Clean up
        docker stop vuio-test
        docker rm vuio-test

  platform-specific-tests:
    name: Platform-Specific Feature Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            test_name: "Windows UAC and Firewall Tests"
            test_command: "cargo test --test platform_tests windows_tests"
          - os: macos-latest
            test_name: "macOS Permissions and Multicast Tests"
            test_command: "cargo test --test platform_tests macos_tests"
          - os: ubuntu-latest
            test_name: "Linux Capabilities and Namespaces Tests"
            test_command: "cargo test --test platform_tests linux_tests"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-platform-${{ hashFiles('**/Cargo.lock') }}

    - name: Run platform-specific tests
      run: ${{ matrix.test_command }}
      continue-on-error: true # Platform-specific tests may fail in CI environment

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: target/debug/deps/platform_tests-*

  database-migration-tests:
    name: Database Migration and Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-db-${{ hashFiles('**/Cargo.lock') }}

    - name: Run database tests
      run: |
        cargo test --test integration_tests test_database_and_filesystem_integration
        cargo test --test platform_tests database_tests

    - name: Test database backup and restore
      run: |
        cargo test --test platform_tests test_database_backup_restore_on_platform

    - name: Test database health checks
      run: |
        cargo test --test platform_tests test_database_health_check_platform_specific

  file-watcher-tests:
    name: File System Watcher Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-watcher-${{ hashFiles('**/Cargo.lock') }}

    - name: Run file watcher tests
      run: |
        cargo test --test platform_tests watcher_tests
        cargo test --test integration_tests test_file_watcher_and_database_integration

    - name: Test platform-specific file watcher behavior
      run: |
        # Run platform-specific watcher tests
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cargo test --test platform_tests test_windows_file_watcher_behavior || true
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ] || [ "${{ matrix.os }}" = "macos-latest" ]; then
          cargo test --test platform_tests test_unix_file_watcher_behavior || true
        fi
      shell: bash

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, build-artifacts, security-audit, coverage]
    if: failure()
    steps:
    - name: Notify failure
      run: |
        echo "CI pipeline failed. Check the logs for details."
        echo "Failed jobs: ${{ needs.test.result }}, ${{ needs.build-artifacts.result }}, ${{ needs.security-audit.result }}, ${{ needs.coverage.result }}"