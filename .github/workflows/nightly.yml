name: Nightly Cross-Platform Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  extended-platform-matrix:
    name: Extended Platform Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux variants
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            rust: stable
            platform: linux-ubuntu-20
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            rust: stable
            platform: linux-ubuntu-22
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust: nightly
            platform: linux-nightly
          
          # Windows variants
          - os: windows-2019
            target: x86_64-pc-windows-msvc
            rust: stable
            platform: windows-2019
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            rust: stable
            platform: windows-2022
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            rust: stable
            platform: windows-gnu
          
          # macOS variants
          - os: macos-11
            target: x86_64-apple-darwin
            rust: stable
            platform: macos-11
          - os: macos-12
            target: x86_64-apple-darwin
            rust: stable
            platform: macos-12
          - os: macos-latest
            target: aarch64-apple-darwin
            rust: stable
            platform: macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.platform }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: startsWith(matrix.platform, 'linux')
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev build-essential

    - name: Install additional Windows tools
      if: startsWith(matrix.platform, 'windows')
      run: |
        # Install additional Windows development tools if needed
        echo "Windows tools installation complete"

    - name: Install additional macOS tools
      if: startsWith(matrix.platform, 'macos')
      run: |
        # Install additional macOS development tools if needed
        echo "macOS tools installation complete"

    - name: Build with all features
      run: cargo build --all-features --target ${{ matrix.target }}

    - name: Run comprehensive tests
      run: |
        cargo test --all-features --target ${{ matrix.target }} --verbose
        cargo test --all-features --target ${{ matrix.target }} --test platform_tests --verbose
        cargo test --all-features --target ${{ matrix.target }} --test integration_tests --verbose

    - name: Run stress tests
      run: |
        # Run database stress tests
        cargo test --target ${{ matrix.target }} test_database_concurrent_access --release -- --ignored
        
        # Run file watcher stress tests
        cargo test --target ${{ matrix.target }} test_file_watcher_events --release -- --ignored

    - name: Test memory usage
      if: startsWith(matrix.platform, 'linux')
      run: |
        # Install valgrind for memory testing on Linux
        sudo apt-get install -y valgrind
        
        # Run basic memory tests (if binary supports it)
        cargo build --target ${{ matrix.target }} --release
        echo "Memory testing would be performed here"

  cross-compilation-matrix:
    name: Cross-Compilation Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64 gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

    - name: Install cross
      run: cargo install cross

    - name: Cross-compile
      run: |
        # Try cross-compilation (may fail for some targets in CI)
        cross build --target ${{ matrix.target }} --verbose || echo "Cross-compilation failed for ${{ matrix.target }} (may be expected)"

  long-running-tests:
    name: Long-Running Integration Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-long-${{ hashFiles('**/Cargo.lock') }}

    - name: Run long-running database tests
      run: |
        # Test database with large datasets
        cargo test --release test_database_with_large_dataset -- --ignored --nocapture

    - name: Run extended file watcher tests
      run: |
        # Test file watcher with many files
        cargo test --release test_file_watcher_with_many_files -- --ignored --nocapture

    - name: Run network stress tests
      run: |
        # Test network operations under stress
        cargo test --release test_network_under_stress -- --ignored --nocapture

  compatibility-tests:
    name: Backward Compatibility Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Test with minimum supported Rust version
      run: |
        # Install MSRV (if specified in Cargo.toml)
        rustup toolchain install 1.70.0
        rustup default 1.70.0
        
        # Test compilation with MSRV
        cargo check --all-features

    - name: Test database migration compatibility
      run: |
        # Test database migrations from older versions
        cargo test test_database_migration_compatibility -- --ignored

  security-and-fuzzing:
    name: Security and Fuzzing Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Run fuzzing tests
      run: |
        # Initialize fuzzing if fuzz targets exist
        if [ -d "fuzz" ]; then
          cargo fuzz list
          # Run short fuzzing sessions
          timeout 300 cargo fuzz run fuzz_target_1 || echo "Fuzzing completed or timed out"
        else
          echo "No fuzz targets found"
        fi

    - name: Run additional security audits
      run: |
        cargo install cargo-audit
        cargo audit
        
        # Check for unsafe code
        cargo install cargo-geiger
        cargo geiger --all-features

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run performance benchmarks
      run: |
        # Run database performance tests
        cargo test --release test_database_performance -- --ignored --nocapture
        
        # Run network performance tests
        cargo test --release test_network_performance -- --ignored --nocapture
        
        # Run file system performance tests
        cargo test --release test_filesystem_performance -- --ignored --nocapture

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ matrix.os }}
        path: target/criterion/

  notify-results:
    name: Notify Nightly Results
    runs-on: ubuntu-latest
    needs: [extended-platform-matrix, cross-compilation-matrix, long-running-tests, compatibility-tests, security-and-fuzzing, performance-benchmarks]
    if: always()
    steps:
    - name: Collect results
      run: |
        echo "Nightly test results:"
        echo "Extended platform matrix: ${{ needs.extended-platform-matrix.result }}"
        echo "Cross-compilation: ${{ needs.cross-compilation-matrix.result }}"
        echo "Long-running tests: ${{ needs.long-running-tests.result }}"
        echo "Compatibility tests: ${{ needs.compatibility-tests.result }}"
        echo "Security and fuzzing: ${{ needs.security-and-fuzzing.result }}"
        echo "Performance benchmarks: ${{ needs.performance-benchmarks.result }}"

    - name: Create summary
      run: |
        echo "# Nightly Test Summary" > summary.md
        echo "" >> summary.md
        echo "Date: $(date)" >> summary.md
        echo "" >> summary.md
        echo "## Results" >> summary.md
        echo "- Extended platform matrix: ${{ needs.extended-platform-matrix.result }}" >> summary.md
        echo "- Cross-compilation: ${{ needs.cross-compilation-matrix.result }}" >> summary.md
        echo "- Long-running tests: ${{ needs.long-running-tests.result }}" >> summary.md
        echo "- Compatibility tests: ${{ needs.compatibility-tests.result }}" >> summary.md
        echo "- Security and fuzzing: ${{ needs.security-and-fuzzing.result }}" >> summary.md
        echo "- Performance benchmarks: ${{ needs.performance-benchmarks.result }}" >> summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: nightly-test-summary
        path: summary.md